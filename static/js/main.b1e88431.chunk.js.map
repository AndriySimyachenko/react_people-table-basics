{"version":3,"sources":["components/PersonRow/PersonRow.tsx","components/PeopleTable/PeopleTable.tsx","components/API/api.ts","components/utitlites.tsx","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["PersonRow","person","valuesOfPerson","Object","values","pop","className","map","value","PeopleTable","memo","people","header","slug","getPeople","a","fetch","response","json","preparedPeople","peopleFromServer","newPerson","motherName","find","p","name","fatherName","PeoplePage","useState","setPeople","error","setError","getListOfPeople","useCallback","listOfPeople","useEffect","App","to","path","element","ReactDOM","render","document","getElementById"],"mappings":"sQAMaA,EAAuB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC/BC,EAAiBC,OAAOC,OAAOH,GAIrC,OAFAC,EAAeG,MAGb,oBAAIC,UAAU,aAAd,SAEIJ,EAAeK,KAAI,SAAAC,GAAK,OACtB,6BAAKA,GAAS,cCRXC,EAAyBC,gBAAK,YAAiB,IAAdC,EAAa,EAAbA,OAG5C,OACE,wBAAOL,UAAU,mBAAjB,UACE,uBAAOA,UAAU,qBAAjB,SAJmB,CAAC,OAAQ,MAAO,OAAQ,OAAQ,SAAU,UAK3CC,KAAI,SAAAK,GAAM,OACxB,6BAAKA,SAGT,gCACGD,EAAOJ,KAAI,SAAAN,GAAM,OAChB,cAAC,EAAD,CAEEA,OAAQA,GADHA,EAAOY,iB,QCjBXC,EAAS,uCAAG,4BAAAC,EAAA,sEACAC,MAHrB,qEAEqB,cACjBC,EADiB,yBAGhBA,EAASC,QAHO,2CAAH,qDCDTC,EAAc,uCAAG,4BAAAJ,EAAA,sEACGD,IADH,cACtBM,EADsB,QAGXb,KAAI,SAACN,GACpB,IAAMoB,EAAS,eAAQpB,GAUvB,OARAoB,EAAUC,WAAaF,EACpBG,MAAK,SAACC,GAAD,OAAeA,EAAEC,OAASJ,EAAUC,eACvCD,EAAUC,WAEfD,EAAUK,WAAaN,EACpBG,MAAK,SAACC,GAAD,OAAeA,EAAEC,OAASJ,EAAUK,eACvCL,EAAUK,WAERL,KAdmB,kBAiBrBD,GAjBqB,2CAAH,qDCKdO,EAAiB,WAC5B,MAA4BC,mBAA0B,MAAtD,mBAAOjB,EAAP,KAAekB,EAAf,KACA,EAA0BD,mBAAwB,MAAlD,mBAAOE,EAAP,KAAcC,EAAd,KAEMC,EAAkBC,sBAAW,sBAAC,4BAAAlB,EAAA,+EAELI,IAFK,OAE1Be,EAF0B,OAIhCL,EAAUK,GAJsB,gDAMhCH,EAAS,+BANuB,yDAQjC,IAMH,OAJAI,qBAAU,WACRH,MACC,IAECF,EACK,4BAAIA,IAIX,8BACGnB,EACG,cAACF,EAAD,CAAaE,OAAQA,IACrB,8CCEKyB,EA7BH,kBACV,sBAAK9B,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,wCACA,sBAAKA,UAAU,SAAf,UACE,cAAC,IAAD,CACEA,UAAU,0BACV+B,GAAG,IAFL,uBAMA,cAAC,IAAD,CACE/B,UAAU,0BACV+B,GAAG,UAFL,+BASJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,6CACzB,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,MAE9B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,yDCzB/BC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b1e88431.chunk.js","sourcesContent":["import { FC } from 'react';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonRow: FC<Props> = ({ person }) => {\n  const valuesOfPerson = Object.values(person);\n\n  valuesOfPerson.pop();\n\n  return (\n    <tr className=\"person-row\">\n      {\n        valuesOfPerson.map(value => (\n          <td>{value || '-/-'}</td>\n        ))\n      }\n    </tr>\n  );\n};\n","import { FC, memo } from 'react';\nimport { PersonRow } from '../PersonRow/PersonRow';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: FC<Props> = memo(({ people }) => {\n  const columnsHeaders = ['Name', 'Sex', 'Born', 'Died', 'Mother', 'Father'];\n\n  return (\n    <table className=\"table is-striped\">\n      <thead className=\"people-table__head\">\n        {columnsHeaders.map(header => (\n          <th>{header}</th>\n        ))}\n      </thead>\n      <tbody>\n        {people.map(person => (\n          <PersonRow\n            key={person.slug}\n            person={person}\n          />\n        ))}\n\n      </tbody>\n    </table>\n  );\n});\n","const API_BASE\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async (): Promise<Person[]> => {\n  const response = await fetch(API_BASE);\n\n  return response.json();\n};\n","import { getPeople } from './API/api';\n\nexport const preparedPeople = async (): Promise<Person[]> => {\n  const peopleFromServer = await getPeople();\n\n  peopleFromServer.map((person: Person) => {\n    const newPerson = { ...person };\n\n    newPerson.motherName = peopleFromServer\n      .find((p: Person) => p.name === newPerson.motherName)\n      || newPerson.motherName;\n\n    newPerson.fatherName = peopleFromServer\n      .find((p: Person) => p.name === newPerson.fatherName)\n      || newPerson.fatherName;\n\n    return newPerson;\n  });\n\n  return peopleFromServer;\n};\n","import {\n  FC, useCallback, useEffect, useState,\n} from 'react';\n\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\nimport { preparedPeople } from '../utitlites';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const getListOfPeople = useCallback(async () => {\n    try {\n      const listOfPeople = await preparedPeople();\n\n      setPeople(listOfPeople);\n    } catch {\n      setError('Can\\'t load data from server');\n    }\n  }, []);\n\n  useEffect(() => {\n    getListOfPeople();\n  }, []);\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div>\n      {people\n        ? <PeopleTable people={people} />\n        : <p>Loading...</p>}\n    </div>\n  );\n};\n","import { Link, Route, Routes } from 'react-router-dom';\nimport 'bulma/css/bulma.css';\n\nimport './App.scss';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nconst App = () => (\n  <div className=\"App\">\n    <div className=\"header\">\n      <h1>People</h1>\n      <nav className=\"navbar\">\n        <Link\n          className=\"navbar-item navbar-link\"\n          to=\"/\"\n        >\n          Home page\n        </Link>\n        <Link\n          className=\"navbar-item navbar-link\"\n          to=\"/people\"\n        >\n          People page\n        </Link>\n      </nav>\n    </div>\n\n    <Routes>\n      <Route path=\"/\" element={<h1>Home page</h1>} />\n      <Route path=\"people\" element={<PeoplePage />} />\n\n      <Route path=\"*\" element={<h1>Page not found</h1>} />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}